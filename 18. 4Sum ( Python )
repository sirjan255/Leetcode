class Solution:
    def fourSum(self, nums, target):
        nums.sort()  # Sort the array first
        n = len(nums)
        quadruplets = set()  # Use a set to avoid duplicate quadruplets

        for i in range(n - 3):
            for j in range(i + 1, n - 2):
                left, right = j + 1, n - 1
                while left < right:
                    current_sum = nums[i] + nums[j] + nums[left] + nums[right]
                    if current_sum == target:
                        # Add the quadruplet as a tuple (to avoid duplicates)
                        quadruplets.add((nums[i], nums[j], nums[left], nums[right]))
                        left += 1
                        right -= 1
                    elif current_sum < target:
                        left += 1
                    else:
                        right -= 1

        return [list(quad) for quad in quadruplets]  # Convert the set of tuples back to a list of lists

# Example usage:
solution = Solution()
nums = [1, 0, -1, 0, -2, 2]
target = 0
result = solution.fourSum(nums, target)
print(result)  # Output: [[-2, -1, 0, 1], [0, 0, 0, 0], [2, 0, 0, -2], etc.]
